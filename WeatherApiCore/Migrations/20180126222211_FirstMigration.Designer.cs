// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WeatherApiCore.Data;

namespace WeatherApiCore.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20180126222211_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WeatherApiCore.Model.Clouds", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("All");

                    b.HasKey("Id");

                    b.ToTable("Clouds");
                });

            modelBuilder.Entity("WeatherApiCore.Model.Coord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Lat");

                    b.Property<double>("Lon");

                    b.HasKey("Id");

                    b.ToTable("Coord");
                });

            modelBuilder.Entity("WeatherApiCore.Model.Main", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Humidity");

                    b.Property<long>("Pressure");

                    b.Property<double>("Temp");

                    b.Property<long>("TempMax");

                    b.Property<long>("TempMin");

                    b.HasKey("Id");

                    b.ToTable("Main");
                });

            modelBuilder.Entity("WeatherApiCore.Model.Sys", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country");

                    b.Property<double>("Message");

                    b.Property<long>("Sunrise");

                    b.Property<long>("Sunset");

                    b.Property<long>("Type");

                    b.HasKey("Id");

                    b.ToTable("Sys");
                });

            modelBuilder.Entity("WeatherApiCore.Model.Weather", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Icon");

                    b.Property<string>("Main");

                    b.Property<Guid?>("WeatherObjectId");

                    b.HasKey("Id");

                    b.HasIndex("WeatherObjectId");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("WeatherApiCore.Model.WeatherObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Base");

                    b.Property<string>("Class");

                    b.Property<long?>("CloudsId");

                    b.Property<long>("Cod");

                    b.Property<long?>("CoordId");

                    b.Property<long>("Dt");

                    b.Property<long?>("MainId");

                    b.Property<string>("Name");

                    b.Property<long?>("SysId");

                    b.Property<long>("Visibility");

                    b.Property<long?>("WindId");

                    b.HasKey("Id");

                    b.HasIndex("CloudsId");

                    b.HasIndex("CoordId");

                    b.HasIndex("MainId");

                    b.HasIndex("SysId");

                    b.HasIndex("WindId");

                    b.ToTable("WeatherForecast");
                });

            modelBuilder.Entity("WeatherApiCore.Model.Wind", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Deg");

                    b.Property<double>("Speed");

                    b.HasKey("Id");

                    b.ToTable("Wind");
                });

            modelBuilder.Entity("WeatherApiCore.Model.Weather", b =>
                {
                    b.HasOne("WeatherApiCore.Model.WeatherObject")
                        .WithMany("Weather")
                        .HasForeignKey("WeatherObjectId");
                });

            modelBuilder.Entity("WeatherApiCore.Model.WeatherObject", b =>
                {
                    b.HasOne("WeatherApiCore.Model.Clouds", "Clouds")
                        .WithMany()
                        .HasForeignKey("CloudsId");

                    b.HasOne("WeatherApiCore.Model.Coord", "Coord")
                        .WithMany()
                        .HasForeignKey("CoordId");

                    b.HasOne("WeatherApiCore.Model.Main", "Main")
                        .WithMany()
                        .HasForeignKey("MainId");

                    b.HasOne("WeatherApiCore.Model.Sys", "Sys")
                        .WithMany()
                        .HasForeignKey("SysId");

                    b.HasOne("WeatherApiCore.Model.Wind", "Wind")
                        .WithMany()
                        .HasForeignKey("WindId");
                });
#pragma warning restore 612, 618
        }
    }
}
